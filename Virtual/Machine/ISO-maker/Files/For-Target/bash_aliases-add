# Econ-ARK customizations for interactive shells

# Get paths that everybody should have 
[[ -e /etc/environment ]] && source /etc/environment

# Allow cut-and-paste between emacs and shell
if [[ "$(which autocutsel)" != "" ]]; then
    if [[ "$DISPLAY" != "" ]]; then
	#	autocutsel -fork -debug -verbose
	autocutsel -fork -selection PRIMARY
    fi
fi

# Modify prompt to keep track of git branches
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
export PS1="\u@\h:\W\$(parse_git_branch)\[\033[00m\] $ "

# If not already running, launch the vncserver
# Makes it easier to connect to the VM - if it is on a network you can reach

pgrep x0vncserver > /dev/null # Silence it
# "$?" -eq 1 implies that no such process exists, in which case it should be started
[[ $? -eq 1 ]] && (x0vncserver -display :0 -PasswordFile=/home/$USER/.vnc/passwd &> /dev/null &)

# Root user shares the useful stuff above 
if [[ "$USER" == "root" ]]; then
    return # End of stuff that root user should do
fi

# Stuff to be executed only the first time a user logs into an interactive GUI shell
if [[ "$DISPLAY" != "" ]] && [[ ! -e /var/local/finished-software-install ]]; then
    # Configure backdrop - can't be done in start.sh or finish.sh because dbus not running until GUI is up
    # Wait until monitor is up (xrandr finds an active monitor) then get the name of the active monitor

    touch /home/econ-ark/.firstboot  # Signal that first GUI boot user login has succeeded
    [[ -e /home/econ-ark/.secondboot ]] && rm -f /home/econ-ark/.secondboot # but not the second

    # Monitor installations on the "finish" script
    xfce4-terminal --geometry 132x24+0-0 --command "bash -c 'tail -F /var/local/start-and-finish.log'"  # Watch
    # This should terminate with reboot from end of finish
fi

if [[ -e /home/econ-ark/.firstboot ]] && [[ "$DISPLAY" != "" ]] && [[ -e /var/local/finished-software-install ]] && [[ ! -e /home/econ-ark/.secondboot ]]; then
    touch /home/econ-ark/.secondboot 
    monitor=""  
    while [[ "$monitor" == "" ]] ; do # 
	monitor="$(xrandr --listactivemonitors | tail -n 1 | rev | cut -d' ' -f1 | rev)"
	sleep 1
    done

    monitorPath="/backdrop/screen0/monitor$monitor/workspace0" # Get the property name of the monitor

    xfconf-query --channel xfce4-desktop --property "$monitorPath/last-image"  --set /usr/share/xfce4/backdrops/Econ-ARK-Logo-1536x768.jpg
    xfconf-query --channel xfce4-desktop --property "$monitorPath/image-style" --set 4 # Scaling

    # Set background to black (rgba1 property, if it exists)
    black="--type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0" 

    # For some bizarre reason, can't use "$black" shell variable in the command, so spell it out
    xfconf-query --channel xfce4-desktop --property "$monitorPath/rgba1" --type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0 &> /dev/null
    if [[ $? != 0 ]]; then # the rgb property did not exist - so create it 
	xfconf-query --create --channel xfce4-desktop --property "$monitorPath/rgba1" --type double --set 0.0 --type double --set 0.0 --type double --set 0.0 --type double --set 1.0
    fi

    # Turn off ALL the possible ways the screen might get locked -- user can undo this later
    # xfce4-session property /shutdown/LockScreen is one of (far too many) ways to lock the screen
    xfconf-query --channel xfce4-session --property /shutdown/LockScreen &> /dev/null # Querying its value gives an error if it does not exist
    shutdownLockscreenCode="$?" # If it does NOT exist, the code will be NOT be zero
    # If it DOES exist set it to zero
    [[ "$shutdownLockscreenCode" == "0" ]] && xfconf-query --channel xfce4-session --property /shutdown/LockScreen --set false 

    # Power manager is another way to lock 
    xfce4powermanagerexists="$(xfconf-query --channel xfce4-power-manager --list &>/dev/null)" # Not sure whether it's running now or not
    xfce4powermanagerexistsCode="$?" # If zero, it is running -- so quit it (because it causes crash error if reboot happens while running)
    [[ "xfce4powermanagerexistsCode" == "0" ]] && xfce4-power-manager --quit

    # Properties can be set even if it is not running     
    xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/blank-on-ac --set 9999 # a lot of minutes pre-blank!
    xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/lock-screen-suspend-hibernate --set false &>/dev/null 
    xfconf-query --channel xfce4-power-manager --property /xfce4-power-manager/dpms-enabled                  --set false &>/dev/null 

    # Screensaver is a THIRD way to lock the screen
    LockScreenExists="$(xfconf-query --channel xfce4-screensaver --property /lock/enabled --set false &>/dev/null)"
    lockEnabled="$?" # If it does not exist, create it 
    [[ "$lockEnabled" != "0" ]] && xfconf-query --create --channel xfce4-screensaver --property /lock/enabled --type 'bool' --set false

    emacs --geometry 80x28-100+0 /var/local/XUBUNTARK.md &> /dev/null  &
    
fi
